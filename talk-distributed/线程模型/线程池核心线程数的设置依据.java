为什么线程池的核心线程数的设置，要考虑CPU核数以及任务类型。
CPU核数决定物理上并行的线程的数量，任务类型决定CPU的使用率。
如果是计算指令多的就是CPU密集型任务，如果是I/O指令多的就是I/O密集型任务。
计算指令比如四则运算、位运算、与运算、或运算、异或运算等。
I/O指令比如内存读写、磁盘读写、网络传输等。
无论是计算指令还是IO指令都必须依靠CPU来执行，但CPU执行了I/O指令后，在下一个指令执行前有一段空档时间，
在这段空档之间中内切换执行其他指令。
I/O操作耗时并不是指令执行本身耗时，而是指令执行后的后续处理耗时，比如：
内存读写需要在内存中进行数据拷贝等细节处理；
磁盘读写需要磁盘寻道等复杂的物理操作；
网络传输因物理距离而不可避免要等到一定时间。
因此计算密集的任务CPU使用率高，读写密集的任务CPU使用率相对低一点。
CPU使用率飚高与指令频繁执行有关，比如循环代码的指令。
对于计算密集型任务，线程池的核心线程数设置为与CPU核数相等，因为设置多了没有什么用，并行的最大线程数就是CPU核数，多的只能等待。
对于IO密集型任务，线程池的核心线程数可以设置为CPU核数的两倍，当然两倍是经验设置，具体设置要看指令执行时间和IO时间的比例，
如果IO时间约等于指令执行时间就设置为两倍，这样可以把CPU和IO设备的效率都尽可能利用到；
如果IO时间远大于指令执行时间就可以调整为三倍、四倍甚至十倍，参考公式为：最佳线程数 ≈ CPU核数 × (1 + I/O等待时间 / CPU计算时间)  。
实际工程里通常要进行压测后才能确定具体设置，但一般来说初始设置是两倍。
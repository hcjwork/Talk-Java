熔断，Circuit Breaker，是指通过监控服务状态，在故障发生时主动切断调用链，防止系统崩溃。
当服务响应超时或异常时，熔断器会暂时关闭服务调用，避免故障扩散。

降级，Fallback，在系统负载过高或功能异常时关闭功能或通过其他方式准备数据或者返回默认值。

熔断和降级联系紧密，但两者不是同一回事。
熔断是为了防止故障扩散采用了一种快速失败的机制，而降级是为了保证核心流程的可用性采用了替代或兜底方案进行处理。
熔断完全阻断请求，降级是返回预设的兜底响应。

熔断，其实就是把请求的整个链路在某个链路节点进行切断，比如一个请求涉及到A、B、C三个服务，当A调用B时出现故障，
为了避免服务A因此受到影响，就需要切断A对B的调用，避免A调用B的故障传递到服务A这边来，
一旦A调用B时出现的故障被服务A接收到，服务A就不得不进行故障处理，
如果不处理，故障最终会转换为不可用性响应给到发起请求的客户端。
那肯定是要处理的，熔断只是处理链路故障的第一步，熔断了，原本的预期响应是没有收到的，对于服务A本身来说，接下来还要进一步处理，
这时就可以结合一些降级方案，比如查缓存或是返回默认值。

用于服务调用链路熔断的组件，我们称为熔断器，常见的熔断器有：hystrix、sentinel、resilience4j、istio等。
降级的常用组件有：hystrix fallback、sentinel fallback、resilience4j、spring cloud gateway、envoy等。

多级降级策略：降级处理可以分多个层次进行。
例如第一层降级处理是查缓存，第二层降级处理是返回默认值，第三层降级处理就返回友好提示。

服务调用分系统外对系统的调用、系统内服务间调用两种模式，一个业务请求可能涉及到多个业务服务的调用、第三方接口调用等，
熔断器在这个请求响应的链路中承担保护服务不雪崩的责任，降级组件在链路中承担保证基本可用性的责任。

接口调用的失败率上升到指定阈值时触发熔断器的开关，由默认的close关闭状态变为open开启状态，一段时间后，
调整为half_open半开状态，尝试发起接口调用，如果失败则又回到open状态，如果尝试成功，则关闭熔断保护。

调用失败率、熔断保持时间，都可以进行设置。
例如失败率达到50%时触发熔断保护，此时熔断状态为open，每次熔断保持5秒时间，5秒后调整为half_open状态，尝试调用接口，
尝试成功就调整熔断状态为close，即关闭熔断保护，正常通信。
熔断保护还支持请求限流，例如设置熔断状态时只允许10qps放行。

这个失败率或者说错误率，是以什么为失败或错误，有的是接口超时，有些是接口返回500或其他异常。

具体的配置根据实际业务来，熔断这部分又与限流有一定相关性，常见的限流算法有：
固定窗口算法、滑动窗口算法、漏桶算法、令牌桶算法等。






在分布式系统中，为了提供服务的可用性，通常都要部署多个服务实例，对于客户端来说请求发往哪个服务实例是一个问题，
因为要结合不同的因素进行考量，说白了就是从众多服务实例中选择其中一个，只是选择的依据有所差异，并且要尽可能让所有的
服务实例都发挥作用。这个选择过程我们就称之为负载均衡。
常见的负载均衡策略有：随机、轮询、加权轮询、最小连接数、响应时间优先、固定哈希、一致性哈希。

1、随机
将请求随机分发给一个服务实例进行处理。随机生成一个大于0的整数，对服务实例总数取模，再去服务实例列表中取对应的服务实例信息。
这个策略实现起来简单，但完全无法保证服务实例所处理请求数量的均衡性，所以实际工程里基本不采用这种策略。

2、轮询
请求按顺序依次分发给每个服务实例。用一个原子整数计数器，递增后的值对服务实例总数取模，再去服务实例列表中取对应的服务实例信息。
这个策略能让每个服务实例所处理的请求数相对均衡，因此通常作为实际工程里的默认负载均衡策略。

3、加权轮询
请求分配比例在长期范围上保持不变，但在短期内为了尽可能平衡服务实例接收请求的情况，以避免有些服务处于长久饥饿状态。
例如，服务实例1的权重是3，服务实例2的权重是1，来了3个请求，请求分配的服务实例可能是“实例1、实例2、实例1”，
而不是“实例1、实例1、实例1”，当第4个请求到来时，请求通常分配给实例1，这样在4个请求的范围上实例1与实例2所分请求数的比例
保持在3:1。
所以每分一个请求，对应服务实例的权重就要减1，具体操作不算简单。
而这种加权轮询策略用于服务所处机器的资源能力差距较大时，但实际的服务部署设计极少会选资源差距较大的机器去部署服务，
所以这个策略也用得很少。

4、最小连接数
将请求分配给当前连接数最小的服务实例。
这个一般也是用在服务实例的服务能力差异不大的场景。当前连接数多的服务实例在接下来的请求就尽量少分配。
也是为了尽可能平衡不同服务实例的负载水平。

5、固定哈希
按某个关键属性值的哈希码进行请求分配。计算指定属性值的哈希码后，用哈希码对服务实例进行取模，然后选择对应的服务实例。
这个实现起来也比较简单，一般用于特殊场景，比如就是想要把同类的请求分到某一个固定的服务实例进行处理。
这种策略在服务实例出现增减时，根据哈希码对服务实例总数取模的结果就会发生变化，原来固定是服务实例1来处理，
现在可能就会由服务实例2来处理。

6、一致性哈希
基于哈希环固定发送请求到特定服务实例。与固定哈希的策略有共同的基础处理。
但是一致性哈希会为每个服务实例生成哈希值，用哈希值串成一个环，每个哈希值对应一个服务实例。
当服务实例数量发生变化时，请求会分发给请求ip的哈希所距离最近的新哈希环上的服务实例。
例如：
一开始只有3个服务实例，根据实例的哈希值连成一个环是“1->2->3->1”，当增加1个服务实例时，新的环变成了“1->2->3->4->1”，
如果服务实例数没有变化，请求原本应该分配给实例2，现在实例数变化了，请求分配给了3。

一致性哈希在服务实例增减时，只需要将受影响区间（环上相邻部分）的请求重新映射，其他请求不受影响。

7、最短响应时间
响应效率越高的服务实例尽可能多分配请求。

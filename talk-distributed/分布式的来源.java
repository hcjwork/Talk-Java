分布式的演进历程。

现在一说到软件应用就是分布式，分布式的这个概念或模式已经是常态化的东西了。
以前一个单体应用支撑有限的用户访问仍有余力，但近些年网络用户可谓是激增，
连几岁的孩子都可能在用智能手机点击某些界面，或者进入某个app或是进入浏览器跳转到网页。

任何单独的应用必然是有其瓶颈性的，当然分布式的应用同样有其瓶颈性，只不过通过多台机器或多个应用服务的协作，
能够大幅度提高对用户访问流量的支撑度。

所以在当今这个用户规模下的时代，很轻易地就会遇到上千上万的用户同时访问的场景，单体应用不是说完全无法应对，
但会对程序的性能、服务器的资源、网络带宽等有非常大的考验，而这些东西往往又不是随便调整下就能得到有效优化的，
如果想要把应用各方面都压缩到极致，其带来的开发、测试和运维成本甚至可能比单纯的扩充资源或升级配置的成本还要高，
或是更难以落地。
另一个问题是当一个单体应用迭代了多次后，体量非常庞大，调用链也越来越长，一旦出现调用异常就会导致整个应用无法继续服务，
这就是单体应用的另一个痛点：单点故障。

从用户量激增的角度来看，既然一个服务不够，那就搞多个服务来分摊任务。
就像一个工程，原本一个人做需要10天，现在要在10天完成两个工程，那就必须要多安排人来分担工作任务。
从单点故障的角度来看，可以通过同时提供多个服务，当其中某个应用无法继续服务时，其他的应用可以正常提供服务。
同时，也可以对于服务调用做好兜底方案，比如调用链熔断、服务降级、返回友好提示等。

解决了用户访问激增和单点故障问题后，新的问题又来了。
原来是一个服务，现在是多个服务，怎么把用户的请求分发到这些服务上去呢？总不能部署了服务在那闲置。
这就要对用户请求做负载均衡的工作了，即按照某个规则将某个用户请求分发到某个服务上去。

多个服务其实是可以部署在一台机器上的，但一台机器上的硬件资源有限，为了让单个服务尽可能发挥其性能，
实际工程部署中往往是相同的多个服务是分布在不同的机器上部署。 这就带了另一个问题：网络分区。
即便这些机器是处于同一局域网的，但用户发起请求的一端（也就是客户端）与某一台机器建立的网络连接是相互独立的，
都会受到网络各方面因素的影响。

为了解决单体应用的单点故障和性能瓶颈，部署了相同功能的多个服务，但与此同时也产生了很多新问题需解决。


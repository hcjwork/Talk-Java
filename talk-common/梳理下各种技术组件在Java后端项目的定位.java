梳理一下各种技术组件在Java后端项目中的角色与定位。
1、网络模型与协议
无论是七层模型也好，还是四层模型也罢，抑或是其他标准的或新的模型，总而言之是对网络中数据传输的业界约定。
（模型是概念的抽象，协议是具体的实现。抽象与实现，是编程中非常重要且典型的思想。抽象提供规范性，实现提供灵活性。
我想到当我对范围广泛的各种Java技术点感觉有心无力的时候，是否也可以进行抽象呢？即我是否可以抽取这些技术的共同起点。
另外抽取既然可以向上抽取，那应该也可以向下抽取？向上抽取是设计模式或理念，向下抽取是业务需求和基础。）
2、负载均衡器
负载均衡器的作用是把客户端的请求通过某种方式分发给具体的合适的服务器。随着应用架构的发展，现在基本都是服务集群化、网格化。
通过扩展服务实例提高系统可用性的同时，需要解决请求分发的服务节点选择问题，于是就出现了负载均衡器。
3、API网关
请求由客户端发送到服务端，目的就是要从服务端获取某种资源。
不管这些资源是以何种形式变现的（比如文件、图片、音频、视频、文字等），这些资源都可以统称为数据。
但这些数据不是谁来要都给，也不是想要多少就给多少，需要严格的控制，涉及一系列的验证，比如身份、暗号、权限等等。
于是就有了API网关。另外，为了减少服务暴露的风险，客户端的请求先到API网关，再由API网关转发给具体的服务。
尤其是微服务架构下，不同业务模块有自己独立部署的服务工程，每一种业务的服务又部署了多个实例来提高可用性。
4、业务服务的负载均衡
在微服务架构下，每个业务服务一般都部署有多个实例，API网关的请求转发，只是转发给了一个逻辑上的业务服务。
这个业务服务是单体的还是集群的，API网关并不清楚，它只知道做了各种验证没有问题后，就可以把请求往业务服务传递了。
但既然有多个服务实例，总要让它们发挥作用把，所以也需要一种负载均衡策略把请求分发给某个实例节点。
5、不同业务服务间的调用
有一些复杂的业务，可能涉及到多个关键环节，而这些关键环节可能分布在不同的业务服务。
如果想要整体流程完整执行，就要面对不同业务服务之间的通信，比如服务A执行完自己的任务后，接下来需要服务B执行它的任务，就需要通知服务B。
两个不同的业务服务独立部署，有可能都不在同一机器上，在这种情况下两个服务想要通信，通常有两种解决方案。
一是服务A通过某种方式直接通知服务B，二是通过中间件传递信息来完成通信互动。
方式一一般要借助网络协议实现，方式二则以中间件的某些状态或信息为媒介实现。
像方式一的成熟实现有基于HTTP协议和基于TCP协议两种，RPC（Remote Procedure Call，远程过程调用）就是基于TCP协议的。
方式二的常用实现有消息中间件、缓存中间件、数据库中间件等。就是由服务A给中间件发送一种数据作为公约，服务B感知到这个公约数据后做相应的处理。
6、数据缓存
随着用户规模增大，用户的请求量也越来越大。
当请求越来越多时，尤其是并发请求增多，无论是业务服务还是数据库系统的性能会越来越差，因为服务本身的处理能力是有瓶颈的。
为了提升请求响应的整体链路性能，引入了数据缓存。
这里的数据缓存又分为业务服务本地缓存和缓存数据库的缓存。
Java应用服务的本地缓存又称为JVM缓存，就是定义一个生命周期与JVM相同的全局变量，但这个全局变量是集合类型的。
而全局变量是线程共享的，所以一般用的并发安全的集合比如ConcurrentHashMap。但性能并不是很好，于是有了Cacheline等高性能本地缓存。
缓存数据库的缓存即用缓存中间件存储，比如Redis、Memcached等内存数据库。
而工程实践一般会结合本地缓存和内存数据库缓存一起使用，能极大缓解关系型数据库的访问压力。
7、消息传递

8、数据存储

9、服务部署
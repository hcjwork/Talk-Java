对于算法岗位来说，算法无疑是检验能力的直接标准，而算法的效率很大程度影响着相应业务流程的延迟和吞吐量，尤其是一些复杂业务或
行业领域，算法性能的高低成为了系统服务能力的关键瓶颈。
但对于非算法岗位，算法虽然可以作为考核候选人的标准，检查其代码的精炼程度，但其实还有更多的方向可以参考。

对于算法能力的构建可以从做算法题入手，但我个人觉得光是算法题其实不够，要攻克算法这一块，对于非算法专业的从业人员来说，需要
下一番大的功夫，除了算法的各种数据结构、思想和解题套路，对于代码的提炼、变量的复用、分支的剪裁优化等也可以在深入算法的过程中
得到点拨和熟练。
通过熟悉常见的数据结构，了解其机制原理，熟悉基本使用和基本实现，可以帮助理解：
1、为什么数据结构会出现这样的变迁？
2、为什么数据结构的选择和实现对于程序代码执行效率影响深刻？
其实现在已经有很多成熟的类库了，像Java自身的版本迭代升级过程中，也增加了许多方便开发Java应用的各种工具，实际工程中使用
成熟的类库就足够了，除非是需要进行特殊的个性化的针对性开发，可能需要原始算法来构造。

算法相关编程因为有对时间复杂度和额外空间复杂度的关注，引导着算法实现者对原始的基础性代码的不断压缩和优化，到了代码无法压缩
的时候，又开始从构造思维上进行创新变革，这个过程其实有计算机软件技术的需求驱动和发展的缩影，也包含着空间换时间、时间换空间
的巧妙演化。
因此算法是认知计算机技术体系的一个切入点，也是深入理解编程代码优化的切入点。

逐步投入算法知识体系的重构之中，回归到基础代码的应用，对于变量的复用可以减少对象创建，对于逻辑分支的优化可以减少嵌套深度。
从算法能力重构作为一个基点，撬动到Java编程的优化，到中间件的应用，再到请求响应全流程的实践与印证。
把各个板块、要点的学与用想办法串联起来，对于系统的问题能够逐步达成三种状态：
1、见招拆招
对于系统出现的问题有大差不差的认知或解决方向，能够快速设计出`定位、解决、复测`的高效实施方案。
2、见微知著
对于系统的结构、各种模块的关联、框架的使用都有比较高的熟悉度，能够从微小处理预料到可能出现的隐患并预先探索合理的解决方法。
3、未雨绸缪
对于系统交互流程的各个关键环节熟练于心，可以在设计和开发阶段提前解决可能出现的大问题，纠正施行轨道的偏差，并做好留存与备份。




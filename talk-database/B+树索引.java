在索引的数据结构变迁过程中，B树的应用可谓是里程碑式的，平衡、多路、有序三大特性，让索引的效率得到大幅度提升。
而B+树又基于B树优化而来，将原本分散在每个节点的实际数据只在非叶子节点中存储，叶子节点只存储索引值，
索引值所涵盖的表记录行数得到增长，单个节点中能够存储的索引字段值能够高达数百个甚至上千个。
以MySQL的InnoDB存储引擎为例，数据页的大小默认为16KB，一个数据页对应一个节点，一个节点能容纳的空间即默认为16KB。
这个16KB是默认大小，可以通过参数`innodb_page_size`进行修改，这里就以16KB大小为例进行后续讨论。 

一个表主要由三部分组成：表结构、表约束、表数据。索引是基于表字段对应的数据创建的，对应的字段称为索引字段。
一个表字段所占空间多少，主要取决于两个方面：类型、长度。
有些类型长度是不可变的，不管是何值，只要是这类型的就占这么多空间。比如`INT`类型，不管值为10还是10000，都占4B（Byte，字节）空间。
有些类型长度是可变的，按实际长度动态分配，当空间不够时会自动扩容，比如`VARCHAR`类型，设置一个字段为varchar(32)，
这里的32指的是32字符，一个字符占多少字节取决于所用的字符集，字符集可以在创建表时通过charset参数指定。
而一个中文占多少字符也跟字符集相关。
在字符集UTF8MB4中，一个字符占4字节，即4B空间。
假设varchar(32)这个字段存的是英文`jack`，如果字符集是UTF8MB4，这个字段的数据所占空间大小为1B+4B*4=17B，前面的1B是
长度前缀所占空间，无论哪个字符集都有这个长度前缀，都是占1B大小。此时varchar(32)所分配的空间是17B，而不是32*4B=128B。
如果varchar(32)这个字段的值从`jack`修改为`jackrose`，所占空间大小变为1B+4B*8=33B，此时varchar(32)所分配的空间是33B。

字段的字符集、字段的类型、字段的长度，都影响着字段数据的所占大小。
因此表字段设计时除了要兼顾业务需求，还应当考虑扩展性和与索引的适配性，尽可能将字段所占空间进行压缩，这样B+树索引的节点能
存储更多的索引字段值。

如果B+树的一个节点能容纳16KB的数据，假设表table的一行数据总共约500B，要建立索引的字段大小约15B，
那么一个节点如果存储索引字段+数据行，扣除页头元数据约128B，能存储(16B * 1000 - 128B) / (15B + 500B) ≈ 31行数据，
一个节点如果只存储索引字段值+子节点指针，扣除页头元数据约128B，能存储(16B * 1000 - 128B)/(15B + 6B) ≈ 756行数据。
非叶子节点只存储索引字段值+子节点指针，叶子节点存储索引字段+数据行，一个父非叶子节点链接约756个子节点，一颗B+树，
第一层是根节点，只有一个节点，根节点链接756个子节点；第二层开始，每个节点再链接756个子节点，到了第三层就有
756 * 756 ≈ 571536个子节点，若第三层就是叶子节点这一层，则第三层能存储571536 * 31 ≈ 17717616行数据，已经近两千万了。
这一行数据按500B计算是非常大的数据行了，`INT`类型占4B，`BIGINT`类型占8B，`DATETIME`类型占8B，这些类型基本都是固定长度的，
还有些变长的比如`VARCHAR`类型、`TEXT`类型比较占空间，假设能把数据行压缩到300B，以`BIGINT`类型的主键字段建立索引，
第三层如果是叶子节点层，则能存储((16B * 1000 - 128B)/(8B + 6B)) * ((16B * 1000 - 128B) / (15B + 300B))
≈ 1134 * 1134 * 50 ≈ 64297800行数据，已经超过5000万。

一个是查询效率，一个是可支撑的数据量，这两个是数据库读操作的重点优化维度。
其实这两个维度也并非是完全不相干的，对于数据行的大小能尽可能降低，自然就能减少总的数据体量，就能减少磁盘I/O次数，提高性能。
从一开始的表结构设计包括字段设计和索引设计，在满足业务需求的前提下尽量选择简单类型，长度也尽量缩短，可以冗余设计字段，
但要避免存储无用数据。
建立索引当然是提高效率的关键手段，但索引也不是越多越好，尤其是一些使用比较低频的字段没有建立索引的必要，
对于筛选频繁、关联频繁的字段则应当要建立索引，普通索引或联合索引都可以。
只对必要的有排序价值的字段建立索引，联合索引所选择的字段数也不能太多，最好不要超过总字段数的1/2。
索引不能滥用，如果滥用将导致一些使用频率低的索引浪费空间和性能，尤其是全索引扫描时索引越多扫描效率越低。


非叶子节点存储的子节点指针数比索引键多一个。比如存储了3、6、10三个键，子节点会分成4个分支，节点A负责<3范围，
节点B负责[3,6)范围，节点C负责[6,10)范围，节点D负责>=10范围。
叶子节点之间相互链接，是以双向链表的方式存储的。



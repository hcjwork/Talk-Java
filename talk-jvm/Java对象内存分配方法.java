Java对象的内存分配方法主要有两种，一种是指针碰撞，一种是空闲列表。

指针碰撞是维护一个指针（free_ptr）指向空闲内存的起始位置，当一个新对象需要分配内存时，计算好所需内存，
假设新对象所需内存为object_size，那么free_ptr就从原先的位置向地址的高位移动object_size的距离，下一个对象要分配内存
则从free_ptr所指向的新位置开始。
指针碰撞这种内存分配方法只适用于内存是连续的场景，如果可用的空闲内存不是连续则不适用。
但只要是连续空闲内存场景，内存分配起来效率会很高，只需要O(1)的时间复杂度。

空闲列表指的是维护一个链表，这个链表的每个节点记录一块空闲内存的起始位置和大小，当要为一个新对象分配内存时，
会遍历链表查找空间足够的内存块来进行存储。这种内存分配方式就很适合于内存不是连续的场景，尤其是内存碎片化比较严重时。
但因为要遍历链表，所以时间复杂度是O(n)的。而且如果没有找到能存下新对象的内存块，则可能要进行内存压缩整理，将数据移动到
内存的某一端，这样就能让分散的内存块连接起来，就能存下更大的对象。



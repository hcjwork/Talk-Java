动态规划，Dynamic Planning，简称DP。

什么叫动态规划？
如果一些值已经算过了，就存到表里面，下次需要对应的值直接取出来用就行，减少了很多重复工作。
说白了就是把已经计算过的结果缓存起来，下次要用直接取就不用重复计算了。
这种方式能提高效率，但是时间复杂度的级别并没有降低（降低的只是常数项？）

递归缓存法

先把常式函数也就是暴力递归的方式写出来。
假设我作为一个纯小白，怎么把这个常式解法写出来？

递归函数怎么写？
递归函数主要包含三部分：返回值、参数、递归处理
1）返回值
有些有返回值有些不用，返回值具体类型也取决于具体要求。比如要方法数，那就是int类型。这个其实比较好理解。
2）参数
参数一般从需求入手，给了哪些原始值，还包括一些隐含的如数组长度、数组起始位置等，然后还可以结合非边界时一般情况下一些要点，
比如当前位置、剩余长度或步数、已出现的次数等。
3）终止条件
这部分是最难把握的。每一个递归函数必须有return，不然就会栈溢出。那终止条件该怎么考虑呢？
一般从边界和特殊条件入手，比如最左侧、最右侧、长度为0、长度为1、长度为原始长度、当前对象为null等。

如果暴力递归每个分支的情形都是没有交叉的，那动态规划就无法优化也不能优化这样的递归。
只有出现不同分支有重复交叉情况时才能使用动态规划进行优化。

如何对暴力递归也就是常数写法进行优化？
1、先思考递归函数的返回值由谁来决定。
参数列表中，值不发生变化的参数对返回值没有决定性影响，而是由有变化的参数来决定。
而对于有变化的参数来说，不同分支的有些阶段计算出的结果是一样的，这部分就是重复工作了。
2、继续思考如何减少重复工作。
首先可以考虑缓存法，把计算过的缓存起来。
准备一个容器，先初始化每个位置标识为未计算，然后把容器带入递归方法，递归中先检查容器中有没有计算过对应的值，
有就直接返回，没有就计算后把结果存入容器，然后再返回计算结果。这样一来每个不同的子项就只算了一次。

这种一个个计算然后把算过的缓存起来是自顶向下的动态规划，也称作“记忆化搜索”。也是以空间换时间。

3、继续思考再往下怎么优化。



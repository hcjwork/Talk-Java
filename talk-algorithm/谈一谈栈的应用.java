一、概述
栈是基础数据结构之一，一般基于数组或链表实现，具有先进后出的特性。
就像是一个桶，倒进去后要想倒出来，就得把上面压着的先倒出来。
往栈中添加数据，称为入栈、压栈；从栈中取出数据，称为出栈、弹栈。

栈是常见容器，一般有push()、pop()、peek()、isEmpty()等基本操作。
push()即往栈中添加元素，pop()即从栈顶弹出一个元素，peek()是返回栈顶元素但元素不出栈，isEmpty()是判断栈是否为空。

栈的先进后出（FILO）和只能在一端操作的特性，可以用来解决很多经典问题，例如括号匹配、嵌套调用、浏览器历史记录、撤销操作等。

二、栈的实现
1、使用数组实现栈

2、使用链表实现栈

3、使用队列实现栈

三、从算法实例中理解栈的巧妙应用
1、有效括号序列
问题描述：
给出一个仅包含字符'(',')','{','}','['和']',的字符串，判断给出的字符串是否是合法的括号序列。
括号必须以正确的顺序关闭，"()"和"()[]{}"都是合法的括号序列，但"(]"和"([)]"不合法。

实现解析：题干中给出了三对字符表示为合法的括号序列，另外题干最后给出的不合法示例指出合法的括号序列，
不仅要成对还要挨在一起。而看到“成对、对称、回文、迭代”等词第一时间就应该想到可以尝试用栈来解决。
栈在这种情景里的工作原理是，先将对称中的一半压入栈中，当遍历到对称中的另一半时从栈中弹出数据与当前遍历到的数据进行匹配比对。
此题中'('与')'、'{'与'}'、'['与']'都是对称的，所以可以将三组对称字符的左边字符压入栈中，而遍历到非左边字符时，
从栈中弹出左边字符，与当前的非左边字符做配对检查，如果配对失败或者没有左边字符可出栈，就表示不合法。另外配对检查完成后，
最后对于栈要检查下是否为空，如果不为空则表示有没成对的，那也表示不合法。

代码示例：
public static boolean isValid(String input) {
    if (null == input || input.length() == 0) {
        return false;
    }
    Stack<Character> stack = new Stack<>();
    int len = input.length();
    for (int i = 0; i < len; i++) {
        char cur = input.charAt(i);
        // 将左半边的括号压入栈中
        if (cur == '(' || cur == '{' || cur == '[') {
            stack.push(cur);
        } else {
            // 如果栈中没有数据，说明当前这个右半边字符是单着的，无法配对
            if (stack.isEmpty()) {
                return false;
            }
            char top = stack.pop();
            // 检查弹出的右半边括号是否与前一个左半边括号配上对
            if (!checkMatch(top, cur)) {
                return false;
            }
        }
    }
    // 最后再检查下栈中的数据，如果还有说明有没成对的
    return stack.isEmpty();
}
private static boolean checkMatch(char top, char cur) {
    // 三组字符成对才表示合法
    return (top == '(' && cur == ')') || (top == '{' && cur == '}') || (top == '[' && cur == ']');
}

2、括号的最大嵌套深度
问题描述：
给定 有效括号字符串 s，返回 s 的 嵌套深度。嵌套深度是嵌套括号的 最大 数量。

示例 1：
输入：s = "(1+(2*3)+((8)/4))+1"
输出：3
解释：数字 8 在嵌套的 3 层括号中。
示例 2：
输入：s = "(1)+((2))+(((3)))"
输出：3
解释：数字 3 在嵌套的 3 层括号中。
示例 3：
输入：s = "()(())((()()))"
输出：3

提示：
    1 <= s.length <= 100
    s 由数字 0-9 和字符 '+'、'-'、'*'、'/'、'('、')' 组成
    题目数据保证括号字符串 s 是 有效的括号字符串

实现分析：又是括号类的题目，又是成对出现，第一反应就是想到使用栈。使用栈确实可以，但是这里需要求括号的最大嵌套深度，
这通常要知道左括号的计数，如果使用传统栈来存左括号，不太方便计算左括号的数量，需要把栈中元素一个个弹出。
另外并不是单纯统计左括号的数量就行，对于出现右括号与左括号配对时，这一层次的嵌套深度就要重新计算，不然最大嵌套深度就会累计到不合理的数。
因此在这里使用一个整数在逻辑上代替栈即可，++就表示入栈，--就表示出栈，也能达到预期效果。

代码示例：
public static int maxDeepth(String input) {
    if (null == input || input.length() == 0) {
        return 0;
    }

    // 一个数记最大嵌套深度，一个数记左括号数
    int maxDeepth = 0;
    int size = 0;
    int len = input.length();
    for (int i = 0; i < len; i++) {
        char cur = input.charAt(i);
        if (cur == '(') {
            // 遇到左括号就就计一次数
            size++;
            // 更新下最大嵌套深度
            maxDeepth = Math.max(maxDeepth, size);
        } else if (cur == ')') {
            // 遇到右括号就减一次技术。因为和左括号配对一次，这一层的嵌套计数就得重新算
            size--;
        }
    }

    retrun maxDeepth;
}


